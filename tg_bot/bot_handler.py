import asyncio
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup, \
    ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters, CallbackQueryHandler
)
from parsers.parser_robota import RobotaContent, PeriodType
from config import TG_BOT_TOKEN
import re

user_data = {}
user_state = {}
cached_results = {}
current_page = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    reset_user_data(user_id)

    keyboard = [[KeyboardButton("Position"), KeyboardButton("City")],
                [KeyboardButton("Period"), KeyboardButton("Next")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=reply_markup)


async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state.pop(user_id, None)
    user_data.pop(user_id, None)
    cached_results.pop(user_id, None)
    current_page.pop(user_id, None)
    await update.message.reply_text("–í–∞—à —Å–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–µ–∞–Ω—Å–∞.")


def reset_user_data(user_id):
    user_data[user_id] = {'position': None, 'city': None, 'period': None, 'salary_range': None}
    user_state[user_id] = None
    cached_results[user_id] = []
    current_page[user_id] = 0


async def position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = 'awaiting_position'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–ª–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏:")


async def city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = 'awaiting_city'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ —Å—Ç—Ä–∞–Ω—É:")


async def period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [[InlineKeyboardButton(p.name, callback_data=p.value)] for p in PeriodType]
    reply_markup = InlineKeyboardMarkup(buttons)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥:", reply_markup=reply_markup)


async def save_period(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    user_data[user_id]['period'] = query.data
    await query.edit_message_text(f"–ü–µ—Ä–∏–æ–¥ –≤—ã–±—Ä–∞–Ω: {query.data}")
    await show_menu(update)


async def save_position(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id]['position'] = update.message.text
    user_state[user_id] = None
    await update.message.reply_text(f"–ü–æ–∑–∏—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {update.message.text}")
    await show_menu(update)


async def save_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data[user_id]['city'] = update.message.text
    user_state[user_id] = None
    await update.message.reply_text(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {update.message.text}")
    await show_menu(update)


async def filter_salary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_state[user_id] = 'awaiting_salary_range'
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∑–∞—Ä–ø–ª–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000-3000):")


async def apply_salary_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    salary_range = update.message.text

    match = re.match(r'(\d+)-(\d+)', salary_range)
    if not match:
        await update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –∫–∞–∫ 1000-3000.")
        return
    user_data[user_id]['salary_range'] = tuple(map(int, match.groups()))
    user_state[user_id] = None
    await update.message.reply_text("–§–∏–ª—å—Ç—Ä –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.")


async def next_step(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    params = user_data[user_id]
    position = params.get('position', '')
    city = params.get('city', 'ukraine')
    period = params.get('period', PeriodType.THREE_MONTHS.value)

    if not position:
        await update.message.reply_text(
            "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 'Position' –∏ –≤–≤–µ–¥–∏—Ç–µ –µ—ë.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("Position"), KeyboardButton("City")],
                 [KeyboardButton("Period"), KeyboardButton("Next")]],
                resize_keyboard=True
            )
        )
        return

    await update.message.reply_text(f"üîé –ü–æ–∏—Å–∫ –Ω–∞—á–∞–ª—Å—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
                                    f"üìÑ Position: {position}\nüìç City: {city}\nüóì Period: {period}")

    asyncio.create_task(start_background_search(user_id, position, city, period))

    keyboard = [[KeyboardButton("Filter Salary"), KeyboardButton("Show")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü–æ–∏—Å–∫ –∏–¥–µ—Ç. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å 'Show' –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.",
        reply_markup=reply_markup)


async def start_background_search(user_id, position, city, period):
    try:
        content_robota = await asyncio.to_thread(RobotaContent(
            position=position,
            city=city,
            period=period
        ).get_info)

        if not content_robota:
            cached_results[user_id] = 'empty'
            print("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return
        cached_results[user_id] = content_robota
    except Exception as e:
        cached_results[user_id] = []
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")



async def show_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not cached_results.get(user_id):
        await update.message.reply_text(
            "–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞...",
            reply_markup=ReplyKeyboardRemove()
        )

        while not cached_results.get(user_id):
            await asyncio.sleep(1)

    if isinstance(cached_results.get(user_id), str) and cached_results.get(user_id) == 'empty':
        reset_user_data(user_id)
        await update.message.reply_text(
            "–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("Position"), KeyboardButton("City")],
                 [KeyboardButton("Period"), KeyboardButton("Next")]],
                resize_keyboard=True
            )
        )
        return

    await display_results(update, user_id)


async def display_results(update: Update, user_id):
    results = cached_results.get(user_id, [])

    if not results:
        await update.message.reply_text("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø–æ–∏—Å–∫ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω.")
        return

    salary_range = user_data[user_id].get('salary_range')
    if salary_range:
        min_salary, max_salary = salary_range
        results = [r for r in results if
                   r.get('salary') and min_salary <= int(re.search(r'\d+', r['salary']).group()) <= max_salary]
    start_idx = current_page[user_id]
    end_idx = min(start_idx + 5, len(results))
    print(len(results))
    print(start_idx, end_idx)
    for candidate in results[start_idx:end_idx]:
        print(candidate)
        text = (f"üîó [–°—Å—ã–ª–∫–∞]({candidate['link']})\nüìÑ {candidate['position']}\nüë§ {candidate['name']}\n"
                f"üìç {candidate['location']}\nüí∞ {candidate.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                f"üîß –û–ø—ã—Ç: {candidate.get('experience', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
        await update.message.reply_text(text, parse_mode='Markdown')
    current_page[user_id] = end_idx
    total_results = len(results)
    if current_page[user_id] < total_results:
        await update.message.reply_text(f"–ü–æ–∫–∞–∑–∞–Ω–æ {min(end_idx, total_results)} –∏–∑ {total_results}.",
                                        reply_markup=ReplyKeyboardMarkup([[KeyboardButton(f"More")]],
                                                                         resize_keyboard=True))
    else:
        await update.message.reply_text("–í—Å–µ –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑–∞–Ω—ã. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        reset_user_data(user_id)
        await show_menu(update)


async def show_menu(update: Update):
    keyboard = [[KeyboardButton("Position"), KeyboardButton("City")],
                [KeyboardButton("Period"), KeyboardButton("Next")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    if hasattr(update, "callback_query") and update.callback_query:
        await update.callback_query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)
    else:
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=reply_markup)


async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_state.get(user_id) == 'awaiting_position':
        await save_position(update, context)
    elif user_state.get(user_id) == 'awaiting_city':
        await save_city(update, context)
    elif user_state.get(user_id) == 'awaiting_salary_range':
        await apply_salary_filter(update, context)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")


def main():
    application = ApplicationBuilder().token(TG_BOT_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stop", stop))

    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Position$"), position))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^City$"), city))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Period$"), period))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Next$"), next_step))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Show$"), show_results))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^More$"), show_results))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex("^Filter Salary$"), filter_salary))
    application.add_handler(CallbackQueryHandler(save_period))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    application.run_polling()


if __name__ == "__main__":
    main()
